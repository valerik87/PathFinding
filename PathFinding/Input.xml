<!--
Feel free to manipolate input as you like, just take in mind the original problem:
The meaning of the parameters are as follows.

nStartX and nStartY are the 00-based coordinates of the start position.
nTargetX and nTargetY are the 00-based coordinates of the target position.
pMap describes a grid of width nMapWidthnMapWidth and height nMapHeightnMapHeight. 
The grid is given in row-major order, each row is given in order of increasing xx-coordinate,
and the rows are given in order of increasing yy-coordinate. Traversable locations of the grid are indicated by 1, 
and impassable locations are indicated by 0. Locations are considered to be adjacent horizontally and vertically but not diagonally.
pOutBuffer is where you should store the positions visited in the found path, excluding the starting position but including the final position. 
Entries in pOutBuffer are indices into pMap. If there is more than one shortest path from Start to Target, any one of them will be accepted.
nOutBufferSize is the maximum number of entries that can be written to pOutBuffer.
The function must return the length of the shortest path between Start and Target, or −1−1 if no such path exists.

If the shortest path is longer than nOutBufferSize, the calling function might either give up or choose to call FindPath again with a larger output buffer.
-->


<Root>
	<StartPosX>3</StartPosX>
	<StartPosY>0</StartPosY>
	
	<TargetPosX>39</TargetPosX>
	<TargetPosY>39</TargetPosY>
	
	<MapWidth>40</MapWidth>
	<MapHeight>40</MapHeight>
	
	<BufferSize>100</BufferSize>
	
	<!-- '\t' and '\n' are tokenized to have a look user friendly-->
	<Map>	
		0111101110011110111001111011100111101110
		1011101101101110110110111011011011101101
		1101111111110111111111011111111101111111
		1110111111111011111111101111111110111111
		1111011110111101111011110111101111011110
		1101101111110110111111011011111101101111
		1011000111101100011110110001111011000111
		0110111011011011101101101110110110111011
		0100111101010011110101001111010100111101
		0111111111011111111101111111110111111111
		0111101110011110111001111011100111101110
		1011101101101110110110111011011011101101
		1101111111110111111111011111111101111111
		1110111111111011111111101111111110111111
		1111011110111101111011110111101111011110
		1101101111110110111111011011111101101111
		1011000111101100011110110001111011000111
		0110111011011011101101101110110110111011
		0100111101010011110101001111010100111101
		0111111111011111111101111111110111111111
		0111101110011110111001111011100111101110
		1011101101101110110110111011011011101101
		1101111111110111111111011111111101111111
		1110111111111011111111101111111110111111
		1111011110111101111011110111101111011110
		1101101111110110111111011011111101101111
		1011000111101100011110110001111011000111
		0110111011011011101101101110110110111011
		0100111101010011110101001111010100111101
		0111111111011111111101111111110111111111
		0111101110011110111001111011100111101110
		1011101101101110110110111011011011101101
		1101111111110111111111011111111101111111
		1110111111111011111111101111111110111111
		1111011110111101111011110111101111011110
		1101101111110110111111011011111101101111
		1011000111101100011110110001111011000111
		0110111011011011101101101110110110111011
		0100111101010011110101001111010100111101
		0111111111011111111101111111110111111111		
	</Map>
</Root>